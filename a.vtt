WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.060 --> 00:00:04.290
你好互联网，欢迎来到我的设计模式视频教程的第 6 部分

00:00:04.290 --> 00:00:09.269
今天我们将介绍抽象工厂模式并回顾

00:00:09.269 --> 00:00:13.349
以完全不同的方式使用工厂模式

00:00:13.349 --> 00:00:17.490
之前的教程因为我收到了很多关于它的问题所以让我们

00:00:17.490 --> 00:00:21.570
进入它，那么抽象工厂模式到底是什么？

00:00:21.570 --> 00:00:26.880
工厂，但一切都封装了对对象进行排序的方法

00:00:26.880 --> 00:00:31.289
构建对象的工厂最终对象和最终对象

00:00:31.289 --> 00:00:35.010
包含使用策略模式的对象，如果您不记得

00:00:35.010 --> 00:00:38.160
上面有一个指向策略模式的链接，但我稍后会查看它

00:00:38.160 --> 00:00:42.120
在教程中，策略模式仅使用所谓的组合或

00:00:42.120 --> 00:00:47.160
换句话说，它的类字段实际上是对象本身，但要么

00:00:47.160 --> 00:00:50.219
如果你不明白让我们继续，那么你可以用抽象做什么

00:00:50.219 --> 00:00:54.600
工厂它允许您创建与家庭相关的对象，而无需指定

00:00:54.600 --> 00:00:59.190
具体课程非常重要，因为它为您提供了大量

00:00:59.190 --> 00:01:03.480
无论何时想要拥有许多对象，都可以灵活地使用它们

00:01:03.480 --> 00:01:07.560
可以在运行时动态添加或更改，并带有抽象

00:01:07.560 --> 00:01:11.909
工厂，您可以对您能想象的任何事物进行建模，并轻松拥有这些对象

00:01:11.909 --> 00:01:15.780
通过通用接口与众多其他对象交互唯一不好的

00:01:15.780 --> 00:01:19.500
关于抽象工厂的事情是它会变得非常复杂

00:01:19.500 --> 00:01:22.830
但希望在本教程中我可以让它变得简单 现在我想移动

00:01:22.830 --> 00:01:26.520
到工厂模式我要简化这一切的一切

00:01:26.520 --> 00:01:29.520
只是图片，但最终我会进入代码

00:01:29.520 --> 00:01:33.990
工厂模式你基本上有你的应用程序这是这个外星人的权利

00:01:33.990 --> 00:01:39.600
在这里，它会说制造一个 UFO 然后你使用所谓的工厂

00:01:39.600 --> 00:01:41.820
等一下，我将向您展示所有这些小东西背后的所有代码

00:01:41.820 --> 00:01:46.920
这个工厂根据外星人输入的漂亮图片

00:01:46.920 --> 00:01:51.960
在这种情况下，要么发射 UFO 火箭，要么发射 UFO 老板

00:01:51.960 --> 00:01:57.899
然后工厂发出具有名称速度和损坏的抽象类，然后

00:01:57.899 --> 00:02:03.630
然后这些抽象类用于创建最终产品，以便您

00:02:03.630 --> 00:02:07.590
可以看到这里没有具体的类，因为所有这些都是

00:02:07.590 --> 00:02:12.450
抽象出来，所以这里的这些人几乎可以成为任何东西

00:02:12.450 --> 00:02:15.570
因为他们定义了名称速度和伤害

00:02:15.570 --> 00:02:20.040
这就是这些抽象类所做的，所以这是工厂的基础

00:02:20.040 --> 00:02:23.610
模式 现在让我们回过头来看看代码并进一步解释这一点

00:02:23.610 --> 00:02:27.060
这是工厂模式，如果你看不到这个，别担心，我要去

00:02:27.060 --> 00:02:30.570
放大一切，基本上你可以在这里看到小外星人

00:02:30.570 --> 00:02:35.010
要求 UFO 工厂在它吐出的 UFO 盒子上打勾

00:02:35.010 --> 00:02:38.730
拿出一个抽象玻璃，然后那些抽象类将创建一个

00:02:38.730 --> 00:02:42.480
或者其他这些不同的船所以让我们放大这里看看

00:02:42.480 --> 00:02:45.810
我们的主要应用程序发生了什么，我们知道这是主要的

00:02:45.810 --> 00:02:49.950
应用程序，因为它具有 public static void main 一切都将

00:02:49.950 --> 00:02:53.640
在这里跑来跑去，基本上这个家伙所做的就是要求输入

00:02:53.640 --> 00:02:58.680
从用户输入一个你一个 R 或一个 B 然后它将采取

00:02:58.680 --> 00:03:03.630
信息并将其传递给工厂并造船，在这种情况下

00:03:03.630 --> 00:03:08.730
船的类型要么是 au a arm 要么是 B 所以它会通过

00:03:08.730 --> 00:03:12.480
到我的工厂，这是工厂本身，所以让我们放大看看

00:03:12.480 --> 00:03:15.690
看起来像什么然后你去然后工厂会说做

00:03:15.690 --> 00:03:20.940
他们给了我们 au 如果他们这样做了我们将不得不归还一艘不明飞行物的敌舰

00:03:20.940 --> 00:03:24.540
将是一个抽象类，或者他们输入了一个我们将要返回的 R

00:03:24.540 --> 00:03:29.880
一个火箭抽象类或一个大 UFO 敌人抽象类所以一切都是

00:03:29.880 --> 00:03:34.020
如果我们放大这个抽象类，你就可以看到正确的抽象出来

00:03:34.020 --> 00:03:37.200
在这里，如果他们想制造一艘敌舰，他们将不得不

00:03:37.200 --> 00:03:41.160
定义名称速度和伤害以及所有其他不同的方法

00:03:41.160 --> 00:03:44.730
它稍后将在飞船内部创建，然后

00:03:44.730 --> 00:03:49.739
最后我们进入了飞船本身 你可以在这里看到我们的两艘飞船大型 UFO

00:03:49.739 --> 00:03:54.209
敌舰和不明飞行物的敌舰，它们都在这里展开敌舰和

00:03:54.209 --> 00:03:58.140
你可以看到他们进来并提供了一个名字以及一个伤害和一个速度和

00:03:58.140 --> 00:04:01.560
好了，这些就是你的最终目标，它们都准备好了

00:04:01.560 --> 00:04:06.390
现在让我们看看工厂模式与抽象模式有何不同

00:04:06.390 --> 00:04:10.010
在这种情况下，工厂模式记住我们要抽象

00:04:10.010 --> 00:04:14.310
甚至订购过程都将被抽象出来，所以

00:04:14.310 --> 00:04:19.500
每当我们的外星人说我想制造一个 UFO 我希望你让我成为一个就行动

00:04:19.500 --> 00:04:24.150
就像现在这里有一个推销员一样，推销员的唯一工作就是接受订单

00:04:24.150 --> 00:04:27.480
他不在乎任何细节

00:04:27.480 --> 00:04:31.860
他只是想从字面上看销售，所以他要做的就是

00:04:31.860 --> 00:04:36.900
某种中间人定义了一个通用的订购表格，基本上这是

00:04:36.900 --> 00:04:41.550
将成为一个抽象类，并且这个抽象类的唯一要求

00:04:41.550 --> 00:04:47.100
类有一个方法是它包含一个方法叫做让敌人的船没事，所以现在

00:04:47.100 --> 00:04:51.060
现在让我们更具体地制造敌舰，这是我们的通用订购表

00:04:51.060 --> 00:04:56.580
然后将定义可以建造的不同类型的 UFO，你可以

00:04:56.580 --> 00:05:01.229
将此视为更具体的订购表格，这家伙将

00:05:01.229 --> 00:05:07.290
定义一个 UFO 并将其附加到要构建的 UFO 上，它也将给出

00:05:07.290 --> 00:05:10.229
不明飞行物的名字不用担心，我将在此处向您展示代码

00:05:10.229 --> 00:05:13.800
其次只是想让你了解正在发生的事情的过程然后我们

00:05:13.800 --> 00:05:17.729
将定义实现接口的类和这里

00:05:17.729 --> 00:05:22.590
基本上我们要定义的是每个 UFO 必须能够做到的一切

00:05:22.590 --> 00:05:29.250
要被视为不明飞行物，这意味着它需要包含武器以及

00:05:29.250 --> 00:05:34.020
一个引擎，所以从我们在这里创建的这个界面，我们将要创建

00:05:34.020 --> 00:05:38.669
工厂现在这有时会混淆人们只是这样想

00:05:38.669 --> 00:05:42.720
我们将要定义的工厂只能创建一种类型

00:05:42.720 --> 00:05:48.539
枪和一种类型的发动机，但它也可以在这种情况下制造导弹

00:05:48.539 --> 00:05:52.620
在这种情况下，所有这些东西都可以建造，或者所有这些工厂都可以

00:05:52.620 --> 00:05:56.910
从这个抽象类构建只是继续将这些视为订单

00:05:56.910 --> 00:06:01.320
下一步需要做什么的表格或蓝图 所以基本上是我们所说的

00:06:01.320 --> 00:06:05.039
每当你建造这些工厂时，他们必须能够制造出

00:06:05.039 --> 00:06:09.180
枪和引擎 或者他们也可以制造导弹和我们在这里做的

00:06:09.180 --> 00:06:13.820
正在定义什么工厂让每种特定类型的 UFO 记住我们

00:06:13.820 --> 00:06:17.310
抽象出我们想要的一切，以便能够最大限度地使用一切

00:06:17.310 --> 00:06:23.280
通用形式然后从那时起我们有我们的特定工厂，它们是

00:06:23.280 --> 00:06:27.960
将再次输出通用船舶，我们希望封装所有内容，以便

00:06:27.960 --> 00:06:32.250
我们可以把一切都看成是一艘船 所以基本上我们在这里说的是

00:06:32.250 --> 00:06:36.960
在这种情况下，将要创建的每艘敌舰都将前往

00:06:36.960 --> 00:06:40.169
有一个名字武器一个引擎，就是这样，他们不知道是什么类型的

00:06:40.169 --> 00:06:42.389
在我们的引擎中命名，但我们确实知道我们

00:06:42.389 --> 00:06:46.289
需要这些东西基本上是我们在这里从工厂真正定义的

00:06:46.289 --> 00:06:50.550
很简单，我们是说这是制造敌舰的蓝图

00:06:50.550 --> 00:06:56.370
那么这个蓝图将被用来制造一艘非常特殊的船，而你

00:06:56.370 --> 00:06:59.789
可以在这里看到这正是它要做的这个界面

00:06:59.789 --> 00:07:03.840
要求每艘船都有一个名称武器和引擎然后将是

00:07:03.840 --> 00:07:08.160
能够实施以创建实际船舶以及这使我们能够做什么

00:07:08.160 --> 00:07:12.630
再次是利用多态性，我们可以在其中引用每个

00:07:12.630 --> 00:07:16.020
我们将作为敌舰玩的对象，然后说嘿

00:07:16.020 --> 00:07:20.130
敌舰去那边，什么类型的敌舰都无所谓

00:07:20.130 --> 00:07:23.430
我们指出的任何一个都会做我们想让它做的事情，然后

00:07:23.430 --> 00:07:29.130
然后可以在这艘敌舰的每个部分进一步定义

00:07:29.130 --> 00:07:34.080
又是一个抽象的模式，你只是在定义这艘船的细节而已

00:07:34.080 --> 00:07:38.130
就像我们在定义工厂可以做什么的细节以及每一个

00:07:38.130 --> 00:07:41.759
船舶将由一系列部件组成，这将允许什么

00:07:41.759 --> 00:07:47.729
我们要做的是像我之前说的那样使用组合或在我们的内部有字段

00:07:47.729 --> 00:07:54.120
飞船对象是我们的武器和引擎的情况下的对象

00:07:54.120 --> 00:07:58.979
所以让我们以与代码相关的方式来看看这个，然后你就拥有了整个

00:07:58.979 --> 00:08:03.690
抽象类和 Vale 的所有代码都可以在这个视频下面找到，所以让我们

00:08:03.690 --> 00:08:07.440
放大这里好吧，所以我们有我们的小外星人来到这里说嘿我

00:08:07.440 --> 00:08:12.150
要你给我造一艘好船 敌船厂会处理订单

00:08:12.150 --> 00:08:16.229
对于新的敌舰，您将能够使用命令向其发送代码

00:08:16.229 --> 00:08:19.620
运送方法，它基本上只是将订单发送到

00:08:19.620 --> 00:08:24.000
用于制造所述船舶的正确工厂，这就是它要做的事情，并且

00:08:24.000 --> 00:08:28.470
然后在这里我们定义了一艘基本的敌舰，我们给了它们名字和

00:08:28.470 --> 00:08:32.729
然后制作不明飞行物，这是我将要展示给你的敌舰建造

00:08:32.729 --> 00:08:37.079
一秒钟，我们将传递 UFO 字符串，在这种情况下

00:08:37.079 --> 00:08:41.729
string UFO boss 所以现在让我们来看看我们这里有的这个抽象类

00:08:41.729 --> 00:08:45.480
在那里你可以看到敌舰建造，它会做得很好，这是一个

00:08:45.480 --> 00:08:51.240
抽象类，它将要求任何真正的订单特定的订单形式

00:08:51.240 --> 00:08:53.790
将能够制作动画

00:08:53.790 --> 00:08:59.280
和字符串类型的船，将是 UFO 或 BOSS UFO，如您所见

00:08:59.280 --> 00:09:02.790
就在这里 UFO UFO boss 这样字符串就会被传递

00:09:02.790 --> 00:09:06.960
在那里，这将作为创造敌人的秩序机制

00:09:06.960 --> 00:09:11.460
拥有武器引擎和名称的舰船，没有其他你将看到的

00:09:11.460 --> 00:09:15.750
这里有一点，用于发动机和武器的那些特定部件取决于

00:09:15.750 --> 00:09:18.960
在将要传递的字符串上，这里就是这个字符串

00:09:18.960 --> 00:09:23.220
船的类型，然后船创建后的这些方法都行

00:09:23.220 --> 00:09:26.610
跑到这里让船显示敌船，基本上只是开枪

00:09:26.610 --> 00:09:32.010
信息显示在屏幕上，所以这是抽象的订单，现在让我们

00:09:32.010 --> 00:09:36.600
查看我们不同类型船舶的非常具体的订单，我

00:09:36.600 --> 00:09:40.860
在这种情况下将专注于 UFO 敌方造船，因为我们

00:09:40.860 --> 00:09:44.610
可以有多个非常具体的订单，但在这种情况下，我只是

00:09:44.610 --> 00:09:48.480
现在将专注于一个，这将是唯一需要的课程

00:09:48.480 --> 00:09:53.190
每当您想在此处放置新船以及我们缩小时进行更改

00:09:53.190 --> 00:09:58.740
就在这里，如果 UFO 被发送，我们告诉我们要做的就是抓住那个工厂

00:09:58.740 --> 00:10:04.680
知道普通 UFO 需要什么类型的武器和引擎，然后是敌人

00:10:04.680 --> 00:10:09.300
返回船对象并给出一个名称，就像您在那里看到的那样，然后在

00:10:09.300 --> 00:10:13.380
在这种情况下，我们将做完全相同的事情

00:10:13.380 --> 00:10:18.420
确保使用正确的工厂，以便我们能够弹出 UFO 老板

00:10:18.420 --> 00:10:24.090
而不是普通的不明飞行物，现在我们进入了我们工厂的抽象类

00:10:24.090 --> 00:10:28.680
在这里使用这个界面敌舰工厂你将能够建造

00:10:28.680 --> 00:10:33.690
船连同这些船的所有组件就在这里

00:10:33.690 --> 00:10:37.860
如果对象想要成为一个对象，您将定义所需的部分

00:10:37.860 --> 00:10:41.220
敌舰就像我们对所有界面所做的一样，我们将要强制执行

00:10:41.220 --> 00:10:45.510
他们来实现这些方法，然后如果你来到这里，这个工厂就是

00:10:45.510 --> 00:10:50.070
将使用敌舰工厂界面来创建非常具体的 UFO

00:10:50.070 --> 00:10:54.780
在这种情况下敌舰的零件或方法，这就是我们要去的地方

00:10:54.780 --> 00:10:58.950
通过定义实现的方法来定义船舶将使用的所有部件

00:10:58.950 --> 00:11:05.070
就在这里使用es武器或敌舰武器和敌舰引擎所以现在

00:11:05.070 --> 00:11:09.780
我们已经创建了我们的工厂，然后它们就会弹出

00:11:09.780 --> 00:11:14.940
不同类型的抽象敌舰类让我们来看看

00:11:14.940 --> 00:11:18.090
在这里，您将再次看到敌舰的抽象类，它是

00:11:18.090 --> 00:11:21.750
将有一个名字，一个武器和一个引擎，然后所有其他的东西都是

00:11:21.750 --> 00:11:25.920
只是基本的，然后这个抽象类将强制执行，因为我们有

00:11:25.920 --> 00:11:30.210
此处为每艘将被定义为具有该方法的船舶抽象

00:11:30.210 --> 00:11:34.470
调用 make ship 然后最后你可以在这里看到我实现了两个

00:11:34.470 --> 00:11:38.430
字符串方法在这里，这只是让我进入我们的内心

00:11:38.430 --> 00:11:42.780
system.out.print 行例如说打印出一艘将要

00:11:42.780 --> 00:11:46.410
使用这个抽象类，它只是将所有这些信息输出

00:11:46.410 --> 00:11:50.370
关于那艘船，现在让我们看看那些使用它的船

00:11:50.370 --> 00:11:54.720
抽象类，在这里你会看到扩展了敌人的船，它是

00:11:54.720 --> 00:11:58.530
将创建一个船舶工厂的副本，它将在这里保留并且

00:11:58.530 --> 00:12:02.940
你可以在这里看到很容易交换不同的

00:12:02.940 --> 00:12:07.800
枪和引擎的类型取决于船厂，所以现在让我们看看

00:12:07.800 --> 00:12:11.880
我们将如何在这艘宇宙飞船上积累或附加部件，你可以看到

00:12:11.880 --> 00:12:15.630
就在这里，这正是我们要做的，我们有 es 武器

00:12:15.630 --> 00:12:19.350
只做一个界面，将迫使每件武器

00:12:19.350 --> 00:12:23.700
实现两个字符串方法和一个接口 es 引擎，这也是唯一的

00:12:23.700 --> 00:12:28.080
将强制使用此接口的每个对象也实现

00:12:28.080 --> 00:12:33.810
字符串，然后每当实际枪本身创建的对象

00:12:33.810 --> 00:12:39.180
这个类被称为它只是简单地返回 20 伤害和 1,000

00:12:39.180 --> 00:12:43.440
每小时英里数真正酷的是，任何实现

00:12:43.440 --> 00:12:48.750
interface es 武器很容易能够在任何情况下替换该部分

00:12:48.750 --> 00:12:53.070
船所以它提供了几乎无法理解的水平的灵活性我

00:12:53.070 --> 00:12:57.030
认为您可以在这里确切地看到如何使用抽象工厂

00:12:57.030 --> 00:13:00.570
模式来实现几乎任何你想做的事情

00:13:00.570 --> 00:13:06.270
关于模拟，因此既是对工厂模式的审查，也是

00:13:06.270 --> 00:13:10.410
看看抽象工厂模式所有的代码都可以在der

00:13:10.410 --> 00:13:13.680
在视频下方，如果您有任何问题，它可能会得到解答

00:13:13.680 --> 00:13:17.850
在那里，因为它被大量评论，请在下面留下任何问题或评论

00:13:17.850 --> 00:13:21.200
否则直到下次

